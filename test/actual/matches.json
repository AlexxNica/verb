{
  "config.js": {
    "name": "config.js",
    "path": "lib/config.js",
    "comments": [
      {
        "comment": [
          {
            "description": "Initialize config object. This defaults\nto package.json, unless overridden by\npassing an object to `options.config`",
            "param": "{Object} config",
            "return": "{Object}",
            "api": "private",
            "description_html": "<p>Initialize config object. This defaults\nto package.json, unless overridden by\npassing an object to <code>options.config</code></p>",
            "params": [
              {
                "type": "Object",
                "name": "config",
                "description": ""
              }
            ],
            "line": 1
          }
        ]
      }
    ]
  },
  "data.js": {
    "name": "data.js",
    "path": "lib/data.js",
    "comments": [
      {
        "comment": [
          {
            "description": "Extend context with metadata from\n`options.data`.",
            "param": "{Object} options",
            "return": "{Object}",
            "api": "private",
            "description_html": "<p>Extend context with metadata from\n<code>options.data</code>.</p>",
            "params": [
              {
                "type": "Object",
                "name": "options",
                "description": ""
              }
            ],
            "line": 1
          }
        ]
      }
    ]
  },
  "exclusions.js": {
    "name": "exclusions.js",
    "path": "lib/exclusions.js",
    "comments": [
      {
        "comment": [
          {
            "description": "Default exclusions",
            "description_html": "<p>Default exclusions</p>",
            "line": 1
          }
        ]
      },
      {
        "comment": [
          {
            "description": "Omit properties from the context",
            "return": "{Object}",
            "api": "private",
            "description_html": "<p>Omit properties from the context</p>",
            "line": 1
          }
        ]
      }
    ]
  },
  "filters.js": {
    "name": "filters.js",
    "path": "lib/filters.js",
    "comments": []
  },
  "functions.js": {
    "name": "functions.js",
    "path": "lib/functions.js",
    "comments": [
      {
        "comment": [
          {
            "description": "Adds functions to the context",
            "name": "functions",
            "param": "{Object} options",
            "return": "{Object}",
            "api": "private",
            "description_html": "<p>Adds functions to the context</p>",
            "params": [
              {
                "type": "Object",
                "name": "options",
                "description": ""
              }
            ],
            "line": 1
          }
        ]
      }
    ]
  },
  "boilerplates.js": {
    "name": "boilerplates.js",
    "path": "lib/functions/boilerplates.js",
    "comments": []
  },
  "comments.js": {
    "name": "comments.js",
    "path": "lib/functions/comments.js",
    "comments": []
  },
  "contrib.js": {
    "name": "contrib.js",
    "path": "lib/functions/contrib.js",
    "comments": []
  },
  "copyright.js": {
    "name": "copyright.js",
    "path": "lib/functions/copyright.js",
    "comments": []
  },
  "date.js": {
    "name": "date.js",
    "path": "lib/utils/date.js",
    "comments": [
      {
        "comment": [
          {
            "description": "Date functions used in _.date() filter",
            "name": "formatDate",
            "param": [
              "{Object} dateobj The date object to format.",
              "{String} pattern The pattern to use, e.g. 'YYYY-MM-DD'."
            ],
            "return": "{String} The formatted date.",
            "api": "public",
            "description_html": "<p>Date functions used in _.date() filter</p>",
            "params": [
              {
                "type": "Object",
                "name": "dateobj",
                "description": "The date object to format."
              },
              {
                "type": "String",
                "name": "pattern",
                "description": "The pattern to use, e.g. 'YYYY-MM-DD'."
              }
            ],
            "line": 1
          }
        ]
      }
    ]
  },
  "docs.js": {
    "name": "docs.js",
    "path": "lib/functions/docs.js",
    "comments": []
  },
  "include.js": {
    "name": "include.js",
    "path": "lib/functions/include.js",
    "comments": []
  },
  "license.js": {
    "name": "license.js",
    "path": "lib/functions/license.js",
    "comments": []
  },
  "partial.js": {
    "name": "partial.js",
    "path": "lib/functions/partial.js",
    "comments": []
  },
  "pkg.js": {
    "name": "pkg.js",
    "path": "lib/functions/pkg.js",
    "comments": []
  },
  "reverse.js": {
    "name": "reverse.js",
    "path": "lib/utils/reverse.js",
    "comments": [
      {
        "comment": [
          {
            "description": "Reverse a string",
            "name": "reverse",
            "param": "{String} str The string to reverse",
            "return": "{String}     The reversed string.",
            "api": "public",
            "description_html": "<p>Reverse a string</p>",
            "params": [
              {
                "type": "String",
                "name": "str",
                "description": "The string to reverse"
              }
            ],
            "line": 1
          }
        ]
      }
    ]
  },
  "safename.js": {
    "name": "safename.js",
    "path": "lib/functions/safename.js",
    "comments": []
  },
  "shortname.js": {
    "name": "shortname.js",
    "path": "lib/functions/shortname.js",
    "comments": []
  },
  "strip.js": {
    "name": "strip.js",
    "path": "lib/utils/strip.js",
    "comments": [
      {
        "comment": [
          {
            "description": "Strip newlines and whitespace padding.",
            "name": "reverse",
            "param": "{String} str The string to reverse",
            "return": "{String}     The reversed string.",
            "api": "public",
            "description_html": "<p>Strip newlines and whitespace padding.</p>",
            "params": [
              {
                "type": "String",
                "name": "str",
                "description": "The string to reverse"
              }
            ],
            "line": 1
          }
        ]
      }
    ]
  },
  "toc.js": {
    "name": "toc.js",
    "path": "lib/utils/toc.js",
    "comments": [
      {
        "comment": [
          {
            "description": "Generate a Table of Contents.",
            "param": [
              "{String} str",
              "{Object} options"
            ],
            "return": "{String} the Table of Contents",
            "api": "public",
            "description_html": "<p>Generate a Table of Contents.</p>",
            "params": [
              {
                "type": "String",
                "name": "str",
                "description": ""
              },
              {
                "type": "Object",
                "name": "options",
                "description": ""
              }
            ],
            "line": 1
          }
        ]
      }
    ]
  },
  "index.js": {
    "name": "index.js",
    "path": "lib/utils/index.js",
    "comments": []
  },
  "matter.js": {
    "name": "matter.js",
    "path": "lib/matter.js",
    "comments": [
      {
        "comment": [
          {
            "description": "Parse and extract YAML, JSON or Coffee\nfront matter.",
            "return": "{Object}",
            "api": "public",
            "description_html": "<p>Parse and extract YAML, JSON or Coffee\nfront matter.</p>",
            "line": 1
          }
        ]
      }
    ]
  },
  "partials.js": {
    "name": "partials.js",
    "path": "lib/partials.js",
    "comments": []
  },
  "plugins.js": {
    "name": "plugins.js",
    "path": "lib/plugins.js",
    "comments": [
      {
        "comment": [
          {
            "description": "Register plugins with Phaser",
            "name": "plugins",
            "param": "{Object} options",
            "return": "{Object}",
            "api": "private",
            "description_html": "<p>Register plugins with Phaser</p>",
            "params": [
              {
                "type": "Object",
                "name": "options",
                "description": ""
              }
            ],
            "line": 1
          }
        ]
      }
    ]
  },
  "template.js": {
    "name": "template.js",
    "path": "lib/template.js",
    "comments": [
      {
        "comment": [
          {
            "description": "Compile Lo-Dash templates.",
            "param": [
              "{String} str      The templates to process.",
              "{Object} data     Context for the templates",
              "{Object} settings Options to pass to Lo-Dash"
            ],
            "return": "{String}",
            "api": "public",
            "description_html": "<p>Compile Lo-Dash templates.</p>",
            "params": [
              {
                "type": "String",
                "name": "str",
                "description": "The templates to process."
              },
              {
                "type": "Object",
                "name": "data",
                "description": "Context for the templates"
              },
              {
                "type": "Object",
                "name": "settings",
                "description": "Options to pass to Lo-Dash"
              }
            ],
            "line": 1
          }
        ]
      }
    ]
  },
  "adjust.js": {
    "name": "adjust.js",
    "path": "lib/utils/adjust.js",
    "comments": [
      {
        "comment": [
          {
            "description": "Adjust heading levels. Adds one heading\nlevel next to all markdown headings to\nmake them correct within the scope of the\ninheriting document. Headings in fenced\ncode blocks are skipped.",
            "return": "{String}",
            "api": "public",
            "description_html": "<p>Adjust heading levels. Adds one heading\nlevel next to all markdown headings to\nmake them correct within the scope of the\ninheriting document. Headings in fenced\ncode blocks are skipped.</p>",
            "line": 1
          }
        ]
      },
      {
        "comment": [
          {
            "description": "Unescapes delimiters",
            "return": "{String}",
            "api": "public",
            "description_html": "<p>Unescapes delimiters</p>",
            "line": 1
          }
        ]
      }
    ]
  },
  "arrayify.js": {
    "name": "arrayify.js",
    "path": "lib/utils/arrayify.js",
    "comments": [
      {
        "comment": [
          {
            "description": "Coerce the value to an array",
            "param": [
              "{name} arrayify",
              "{Array|String} arr"
            ],
            "return": "{Array}",
            "api": "public",
            "description_html": "<p>Coerce the value to an array</p>",
            "params": [
              {
                "type": "name",
                "name": "arrayify",
                "description": ""
              },
              {
                "type": "Array|String",
                "name": "arr",
                "description": ""
              }
            ],
            "line": 1
          }
        ]
      }
    ]
  },
  "block.js": {
    "name": "block.js",
    "path": "lib/utils/block.js",
    "comments": []
  },
  "dir.js": {
    "name": "dir.js",
    "path": "lib/utils/dir.js",
    "comments": [
      {
        "comment": [
          {
            "description": "Get the relative path from process.cwd() to\nthe specifiied paths, from any other directory\nin the project.",
            "return": "{String}",
            "api": "public",
            "description_html": "<p>Get the relative path from process.cwd() to\nthe specifiied paths, from any other directory\nin the project.</p>",
            "line": 1
          }
        ]
      }
    ]
  },
  "expand.js": {
    "name": "expand.js",
    "path": "lib/utils/expand.js",
    "comments": [
      {
        "comment": [
          {
            "description": "Expand files.",
            "name": "expand",
            "param": [
              "{String} src",
              "{Object} options"
            ],
            "return": "{Array}",
            "api": "public",
            "description_html": "<p>Expand files.</p>",
            "params": [
              {
                "type": "String",
                "name": "src",
                "description": ""
              },
              {
                "type": "Object",
                "name": "options",
                "description": ""
              }
            ],
            "line": 1
          }
        ]
      },
      {
        "comment": [
          {
            "description": "Expand files and read in content.",
            "name": "expand",
            "param": [
              "{String} src",
              "{Object} options"
            ],
            "return": "{Array}",
            "api": "public",
            "description_html": "<p>Expand files and read in content.</p>",
            "params": [
              {
                "type": "String",
                "name": "src",
                "description": ""
              },
              {
                "type": "Object",
                "name": "options",
                "description": ""
              }
            ],
            "line": 1
          }
        ]
      },
      {
        "comment": [
          {
            "description": "Expand mapping",
            "param": [
              "{name} expandMapping",
              "{Array|String} patterns Accepts either comma separated globbing patterns or an array of globbing patterns.",
              "{String} dest The base path for dest files.",
              "{Object} options Options to pass in: @option {String} cwd: the current working directory for source files. @option {String} ext: the file extension to use on dest files."
            ],
            "return": "{Array} Returns an array of src-dest file mappings.",
            "api": "public",
            "description_html": "<p>Expand mapping</p>",
            "params": [
              {
                "type": "name",
                "name": "expandMapping",
                "description": ""
              },
              {
                "type": "Array|String",
                "name": "patterns",
                "description": "Accepts either comma separated globbing patterns or an array of globbing patterns."
              },
              {
                "type": "String",
                "name": "dest",
                "description": "The base path for dest files."
              },
              {
                "type": "Object",
                "name": "options",
                "description": "Options to pass in: @option {String} cwd: the current working directory for source files. @option {String} ext: the file extension to use on dest files."
              }
            ],
            "line": 1
          }
        ]
      }
    ]
  },
  "expandData.js": {
    "name": "expandData.js",
    "path": "lib/utils/expandData.js",
    "comments": [
      {
        "comment": [
          {
            "description": "Read in data from a string, object or array",
            "name": "expandData",
            "param": [
              "{String|Object|Array} data     String, object or array",
              "{Object}              options  Pass an object of options"
            ],
            "return": "{Object}                       Returns an object of metadata",
            "api": "{Public}",
            "description_html": "<p>Read in data from a string, object or array</p>",
            "params": [
              {
                "type": "String|Object|Array",
                "name": "data",
                "description": "String, object or array"
              },
              {
                "type": "Object",
                "name": "options",
                "description": "Pass an object of options"
              }
            ],
            "line": 1
          }
        ]
      }
    ]
  },
  "isType.js": {
    "name": "isType.js",
    "path": "lib/utils/isType.js",
    "comments": [
      {
        "comment": [
          {
            "description": "Returns the `typeOf` a JavaScript value",
            "return": "{String}",
            "api": "public",
            "description_html": "<p>Returns the <code>typeOf</code> a JavaScript value</p>",
            "line": 1
          }
        ]
      }
    ]
  },
  "postProcess.js": {
    "name": "postProcess.js",
    "path": "lib/utils/postProcess.js",
    "comments": [
      {
        "comment": [
          {
            "description": "Post-process content with RegExp replacement patterns",
            "param": [
              "{String} str      The string with patterns to replace.",
              "{Object} options  The options to use @option {patterns} Replacement patterns to use"
            ],
            "return": "{String}          The transformed string.",
            "api": "public",
            "description_html": "<p>Post-process content with RegExp replacement patterns</p>",
            "params": [
              {
                "type": "String",
                "name": "str",
                "description": "The string with patterns to replace."
              },
              {
                "type": "Object",
                "name": "options",
                "description": "The options to use @option {patterns} Replacement patterns to use"
              }
            ],
            "line": 1
          }
        ]
      }
    ]
  },
  "username.js": {
    "name": "username.js",
    "path": "lib/utils/username.js",
    "comments": [
      {
        "comment": [
          {
            "description": "Extract a username/org from a\nGitHub URL.",
            "param": "{String}",
            "return": "{String}",
            "api": "public",
            "description_html": "<p>Extract a username/org from a\nGitHub URL.</p>",
            "params": [
              {
                "name": "{String}",
                "description": ""
              }
            ],
            "line": 1
          }
        ]
      }
    ]
  }
}