{
  "colors.js": {
    "name": "colors.js",
    "path": "lib/colors.js",
    "comments": [
      []
    ]
  },
  "config.js": {
    "name": "config.js",
    "path": "lib/config.js",
    "comments": [
      [
        {
          "description": "Initialize config object. This defaults to\npackage.json, unless overridden by passing\nan object to `options.config`",
          "param": "{Object} config",
          "return": "{Object}",
          "api": "private",
          "description_html": "<p>Initialize config object. This defaults to\npackage.json, unless overridden by passing\nan object to <code>options.config</code></p>",
          "params": [
            {
              "type": "Object",
              "name": "config",
              "description": ""
            }
          ],
          "line": 15
        }
      ]
    ]
  },
  "data.js": {
    "name": "data.js",
    "path": "lib/data.js",
    "comments": [
      [
        {
          "description": "Extend context with metadata from\n`options.data`.",
          "param": "{Object} options",
          "return": "{Object}",
          "api": "private",
          "description_html": "<p>Extend context with metadata from\n<code>options.data</code>.</p>",
          "params": [
            {
              "type": "Object",
              "name": "options",
              "description": ""
            }
          ],
          "line": 16
        }
      ]
    ]
  },
  "exclusions.js": {
    "name": "exclusions.js",
    "path": "lib/exclusions.js",
    "comments": [
      [
        {
          "description": "Default exclusions",
          "description_html": "<p>Default exclusions</p>",
          "line": 13
        },
        {
          "description": "Omit properties from the context",
          "return": "{Object}",
          "api": "private",
          "description_html": "<p>Omit properties from the context</p>",
          "line": 30
        }
      ]
    ]
  },
  "file.js": {
    "name": "file.js",
    "path": "lib/file.js",
    "comments": [
      [
        {
          "description": "Expand files.",
          "name": "expand",
          "param": [
            "{String} src",
            "{Object} options"
          ],
          "return": "{Array}",
          "api": "public",
          "description_html": "<p>Expand files.</p>",
          "params": [
            {
              "type": "String",
              "name": "src",
              "description": ""
            },
            {
              "type": "Object",
              "name": "options",
              "description": ""
            }
          ],
          "line": 17
        },
        {
          "description": "Read files.",
          "name": "read",
          "param": [
            "{String} src",
            "{Object} options"
          ],
          "return": "{Array}",
          "api": "public",
          "description_html": "<p>Read files.</p>",
          "params": [
            {
              "type": "String",
              "name": "src",
              "description": ""
            },
            {
              "type": "Object",
              "name": "options",
              "description": ""
            }
          ],
          "line": 41
        },
        {
          "description": "Expand mapping",
          "param": [
            "{name} expandMapping",
            "{Array|String} patterns Accepts either comma separated globbing patterns or an array of globbing patterns.",
            "{String} dest The base path for dest files.",
            "{Object} options Options to pass in: @option {String} cwd: the current working directory for source files. @option {String} ext: the file extension to use on dest files."
          ],
          "return": "{Array} Returns an array of src-dest file mappings.",
          "api": "public",
          "description_html": "<p>Expand mapping</p>",
          "params": [
            {
              "type": "name",
              "name": "expandMapping",
              "description": ""
            },
            {
              "type": "Array|String",
              "name": "patterns",
              "description": "Accepts either comma separated globbing patterns or an array of globbing patterns."
            },
            {
              "type": "String",
              "name": "dest",
              "description": "The base path for dest files."
            },
            {
              "type": "Object",
              "name": "options",
              "description": "Options to pass in: @option {String} cwd: the current working directory for source files. @option {String} ext: the file extension to use on dest files."
            }
          ],
          "line": 68
        }
      ]
    ]
  },
  "filters.js": {
    "name": "filters.js",
    "path": "lib/filters.js",
    "comments": [
      [
        {
          "description": "Adds filters to the context",
          "name": "filters",
          "param": "{Object} options",
          "return": "{Object}",
          "api": "private",
          "description_html": "<p>Adds filters to the context</p>",
          "params": [
            {
              "type": "Object",
              "name": "options",
              "description": ""
            }
          ],
          "line": 15
        },
        {
          "description": "Built-in filters",
          "description_html": "<p>Built-in filters</p>",
          "line": 31
        },
        {
          "description": "User-defined",
          "description_html": "<p>User-defined</p>",
          "line": 37
        }
      ]
    ]
  },
  "columnify.js": {
    "name": "columnify.js",
    "path": "lib/filters/columnify.js",
    "comments": [
      []
    ]
  },
  "listify.js": {
    "name": "listify.js",
    "path": "lib/utils/listify.js",
    "comments": [
      [
        {
          "description": "Flatten an array and convert it\nto a comma-separated list.",
          "title": "listify",
          "param": "{Array} arr [description]",
          "api": "Public",
          "description_html": "<p>Flatten an array and convert it\nto a comma-separated list.</p>",
          "params": [
            {
              "type": "Array",
              "name": "arr",
              "description": "[description]"
            }
          ],
          "line": 11
        }
      ]
    ]
  },
  "reverse.js": {
    "name": "reverse.js",
    "path": "lib/utils/reverse.js",
    "comments": [
      [
        {
          "description": "Reverse a string",
          "name": "reverse",
          "param": "{String} str The string to reverse",
          "return": "{String}     The reversed string.",
          "api": "public",
          "description_html": "<p>Reverse a string</p>",
          "params": [
            {
              "type": "String",
              "name": "str",
              "description": "The string to reverse"
            }
          ],
          "line": 11
        }
      ]
    ]
  },
  "safename.js": {
    "name": "safename.js",
    "path": "lib/utils/safename.js",
    "comments": [
      [
        {
          "description": "Safename",
          "param": "{[type]} name The name to be modified",
          "return": "{[type]}      The \"safe\" short version of the name",
          "example:": [
            "\"grunt-readme\" => \"readme\"",
            "\"helper-foo\" => \"foo\""
          ],
          "api": "Public",
          "description_html": "<p>Safename</p>",
          "params": [
            {
              "type": "[type]",
              "name": "name",
              "description": "The name to be modified"
            }
          ],
          "line": 14
        }
      ]
    ]
  },
  "shortname.js": {
    "name": "shortname.js",
    "path": "lib/filters/shortname.js",
    "comments": [
      []
    ]
  },
  "strip.js": {
    "name": "strip.js",
    "path": "lib/utils/strip.js",
    "comments": [
      [
        {
          "description": "Strip newlines and whitespace padding.",
          "name": "reverse",
          "param": "{String} str The string to reverse",
          "return": "{String}     The reversed string.",
          "api": "public",
          "description_html": "<p>Strip newlines and whitespace padding.</p>",
          "params": [
            {
              "type": "String",
              "name": "str",
              "description": "The string to reverse"
            }
          ],
          "line": 11
        }
      ]
    ]
  },
  "layout.js": {
    "name": "layout.js",
    "path": "lib/scaffolds/layout.js",
    "comments": [
      []
    ]
  },
  "log.js": {
    "name": "log.js",
    "path": "lib/tags/log.js",
    "comments": [
      []
    ]
  },
  "matter.js": {
    "name": "matter.js",
    "path": "lib/matter.js",
    "comments": [
      [
        {
          "description": "Parse and extract YAML, JSON or Coffee\nfront matter.",
          "return": "{Object}",
          "api": "public",
          "description_html": "<p>Parse and extract YAML, JSON or Coffee\nfront matter.</p>",
          "line": 15
        }
      ]
    ]
  },
  "mixins.js": {
    "name": "mixins.js",
    "path": "lib/mixins.js",
    "comments": [
      [
        {
          "description": "Export mixins",
          "name": "mixins",
          "param": "{Object} options",
          "return": "{Object}",
          "api": "private",
          "description_html": "<p>Export mixins</p>",
          "params": [
            {
              "type": "Object",
              "name": "options",
              "description": ""
            }
          ],
          "line": 11
        }
      ]
    ]
  },
  "plugins.js": {
    "name": "plugins.js",
    "path": "lib/plugins.js",
    "comments": [
      [
        {
          "description": "Adds plugins to the context",
          "name": "plugins",
          "param": "{Object} options",
          "return": "{Object}",
          "api": "private",
          "description_html": "<p>Adds plugins to the context</p>",
          "params": [
            {
              "type": "Object",
              "name": "options",
              "description": ""
            }
          ],
          "line": 17
        },
        {
          "description": "Run built-in plugins",
          "description_html": "<p>Run built-in plugins</p>",
          "line": 35
        },
        {
          "description": "Run user-defined plugins",
          "description_html": "<p>Run user-defined plugins</p>",
          "line": 40
        }
      ]
    ]
  },
  "contributors.js": {
    "name": "contributors.js",
    "path": "lib/utils/contributors.js",
    "comments": [
      []
    ]
  },
  "homepage.js": {
    "name": "homepage.js",
    "path": "lib/plugins/homepage.js",
    "comments": [
      []
    ]
  },
  "repo.js": {
    "name": "repo.js",
    "path": "lib/plugins/repo.js",
    "comments": [
      []
    ]
  },
  "travis.js": {
    "name": "travis.js",
    "path": "lib/plugins/travis.js",
    "comments": [
      [
        {
          "description": ".travis.yml",
          "description_html": "<p>.travis.yml</p>",
          "line": 14
        },
        {
          "description": "If `.travis.yml` does not exist, and\n`travis: true` is defined in the options,\nthen add a `.travis.yml` file to the root\nof the project.",
          "title": "Travis CI badge",
          "description_html": "<p>If <code>.travis.yml</code> does not exist, and\n<code>travis: true</code> is defined in the options,\nthen add a <code>.travis.yml</code> file to the root\nof the project.</p>",
          "line": 26
        },
        {
          "description": "If `.travis.yml` already exists, add\na travis URL to the context for use\nin templates",
          "title": "Travis CI badge",
          "description_html": "<p>If <code>.travis.yml</code> already exists, add\na travis URL to the context for use\nin templates</p>",
          "line": 45
        }
      ]
    ]
  },
  "username.js": {
    "name": "username.js",
    "path": "lib/utils/username.js",
    "comments": [
      [
        {
          "description": "Extract a username/org from a\nGitHub URL.",
          "param": "{String}",
          "return": "{String}",
          "api": "public",
          "description_html": "<p>Extract a username/org from a\nGitHub URL.</p>",
          "params": [
            {
              "name": "{String}",
              "description": ""
            }
          ],
          "line": 16
        }
      ]
    ]
  },
  "scaffolds.js": {
    "name": "scaffolds.js",
    "path": "lib/scaffolds.js",
    "comments": [
      []
    ]
  },
  "comment.js": {
    "name": "comment.js",
    "path": "lib/scaffolds/comment.js",
    "comments": [
      []
    ]
  },
  "gitignore.js": {
    "name": "gitignore.js",
    "path": "lib/scaffolds/gitignore.js",
    "comments": [
      []
    ]
  },
  "html-layout.js": {
    "name": "html-layout.js",
    "path": "lib/scaffolds/html-layout.js",
    "comments": [
      []
    ]
  },
  "methods.js": {
    "name": "methods.js",
    "path": "lib/tags/methods.js",
    "comments": [
      []
    ]
  },
  "readme-basic.js": {
    "name": "readme-basic.js",
    "path": "lib/scaffolds/readme-basic.js",
    "comments": [
      []
    ]
  },
  "readme-contrib.js": {
    "name": "readme-contrib.js",
    "path": "lib/scaffolds/readme-contrib.js",
    "comments": [
      []
    ]
  },
  "tags.js": {
    "name": "tags.js",
    "path": "lib/tags.js",
    "comments": [
      [
        {
          "description": "Adds tags to the context",
          "name": "tags",
          "param": "{Object} options",
          "return": "{Object}",
          "api": "private",
          "description_html": "<p>Adds tags to the context</p>",
          "params": [
            {
              "type": "Object",
              "name": "options",
              "description": ""
            }
          ],
          "line": 16
        },
        {
          "description": "Initialize tags",
          "param": "{Object}  verb",
          "return": "{Object}",
          "description_html": "<p>Initialize tags</p>",
          "params": [
            {
              "type": "Object",
              "name": "verb",
              "description": ""
            }
          ],
          "line": 46
        },
        {
          "description": "Built-in tags",
          "description_html": "<p>Built-in tags</p>",
          "line": 59
        },
        {
          "description": "User-defined",
          "description_html": "<p>User-defined</p>",
          "line": 65
        }
      ]
    ]
  },
  "authors.js": {
    "name": "authors.js",
    "path": "lib/utils/authors.js",
    "comments": [
      []
    ]
  },
  "badge.js": {
    "name": "badge.js",
    "path": "lib/tags/badge.js",
    "comments": [
      [
        {
          "description": "Status, analytics and version badges.",
          "title": "badge",
          "param": [
            "{Object} config",
            "{Object} options"
          ],
          "return": "{Object}",
          "api": "private",
          "description_html": "<p>Status, analytics and version badges.</p>",
          "params": [
            {
              "type": "Object",
              "name": "config",
              "description": ""
            },
            {
              "type": "Object",
              "name": "options",
              "description": ""
            }
          ],
          "line": 22
        }
      ]
    ]
  },
  "changelog.js": {
    "name": "changelog.js",
    "path": "lib/tags/changelog.js",
    "comments": [
      []
    ]
  },
  "comments.js": {
    "name": "comments.js",
    "path": "lib/tags/comments.js",
    "comments": [
      []
    ]
  },
  "contrib.js": {
    "name": "contrib.js",
    "path": "lib/tags/contrib.js",
    "comments": [
      []
    ]
  },
  "copyright.js": {
    "name": "copyright.js",
    "path": "lib/tags/copyright.js",
    "comments": [
      [
        {
          "description": "Add a copyright statement, with author and year(s) in effect.",
          "param": "{Number} startYear Optional parameter to define the start year of the project.",
          "return": "{String}           Complete copyright statement.",
          "example": "true {%= _.copyright() %} => Copyright (c) 2014 Jon Schlinkert, contributors. {%= _.copyright('2012') %} => Copyright (c) 2012-2014 Jon Schlinkert, contributors.",
          "description_html": "<p>Add a copyright statement, with author and year(s) in effect.</p>",
          "params": [
            {
              "type": "Number",
              "name": "startYear",
              "description": "Optional parameter to define the start year of the project."
            }
          ],
          "line": 14
        }
      ]
    ]
  },
  "date.js": {
    "name": "date.js",
    "path": "lib/utils/date.js",
    "comments": [
      [
        {
          "description": "Date functions used in _.date() filter",
          "name": "formatDate",
          "param": [
            "{Object} dateobj The date object to format.",
            "{String} structure The structure to use, e.g. 'YYYY-MM-DD'."
          ],
          "return": "{String} The formatted date.",
          "api": "public",
          "description_html": "<p>Date functions used in _.date() filter</p>",
          "params": [
            {
              "type": "Object",
              "name": "dateobj",
              "description": "The date object to format."
            },
            {
              "type": "String",
              "name": "structure",
              "description": "The structure to use, e.g. 'YYYY-MM-DD'."
            }
          ],
          "line": 10
        }
      ]
    ]
  },
  "dates.js": {
    "name": "dates.js",
    "path": "lib/tags/dates.js",
    "comments": [
      [
        {
          "description": "Date functions used in _.date() filter",
          "name": "formatDate",
          "param": [
            "{Object} dateobj The date object to format.",
            "{String} structure The structure to use, e.g. 'YYYY-MM-DD'."
          ],
          "return": "{String} The formatted date.",
          "api": "public",
          "description_html": "<p>Date functions used in _.date() filter</p>",
          "params": [
            {
              "type": "Object",
              "name": "dateobj",
              "description": "The date object to format."
            },
            {
              "type": "String",
              "name": "structure",
              "description": "The structure to use, e.g. 'YYYY-MM-DD'."
            }
          ],
          "line": 11
        }
      ]
    ]
  },
  "docs.js": {
    "name": "docs.js",
    "path": "lib/tags/docs.js",
    "comments": [
      []
    ]
  },
  "getAuthors.js": {
    "name": "getAuthors.js",
    "path": "lib/tags/getAuthors.js",
    "comments": [
      []
    ]
  },
  "html.js": {
    "name": "html.js",
    "path": "lib/tags/html.js",
    "comments": [
      []
    ]
  },
  "include.js": {
    "name": "include.js",
    "path": "lib/tags/include.js",
    "comments": [
      []
    ]
  },
  "license.js": {
    "name": "license.js",
    "path": "lib/tags/license.js",
    "comments": [
      []
    ]
  },
  "moment.js": {
    "name": "moment.js",
    "path": "lib/tags/moment.js",
    "comments": [
      []
    ]
  },
  "pkg.js": {
    "name": "pkg.js",
    "path": "lib/tags/pkg.js",
    "comments": [
      []
    ]
  },
  "raw.js": {
    "name": "raw.js",
    "path": "lib/tags/raw.js",
    "comments": [
      []
    ]
  },
  "toc.js": {
    "name": "toc.js",
    "path": "lib/utils/toc.js",
    "comments": [
      [
        {
          "description": "Generate a Table of Contents.",
          "param": [
            "{String} str",
            "{Object} options"
          ],
          "return": "{String} the Table of Contents",
          "api": "public",
          "description_html": "<p>Generate a Table of Contents.</p>",
          "params": [
            {
              "type": "String",
              "name": "str",
              "description": ""
            },
            {
              "type": "Object",
              "name": "options",
              "description": ""
            }
          ],
          "line": 15
        }
      ]
    ]
  },
  "template.js": {
    "name": "template.js",
    "path": "lib/template.js",
    "comments": [
      [
        {
          "description": "Compile Lo-Dash templates.",
          "param": [
            "{String} str      The templates to process.",
            "{Object} data     Context for the templates",
            "{Object} settings Options to pass to Lo-Dash"
          ],
          "return": "{String}",
          "api": "public",
          "description_html": "<p>Compile Lo-Dash templates.</p>",
          "params": [
            {
              "type": "String",
              "name": "str",
              "description": "The templates to process."
            },
            {
              "type": "Object",
              "name": "data",
              "description": "Context for the templates"
            },
            {
              "type": "Object",
              "name": "settings",
              "description": "Options to pass to Lo-Dash"
            }
          ],
          "line": 16
        }
      ]
    ]
  },
  "adjust.js": {
    "name": "adjust.js",
    "path": "lib/utils/adjust.js",
    "comments": [
      [
        {
          "description": "Adjust heading levels. Adds one heading\nlevel next to all markdown headings to\nmake them correct within the scope of the\ninheriting document. Headings in fenced\ncode blocks are skipped.",
          "return": "{String}",
          "api": "public",
          "description_html": "<p>Adjust heading levels. Adds one heading\nlevel next to all markdown headings to\nmake them correct within the scope of the\ninheriting document. Headings in fenced\ncode blocks are skipped.</p>",
          "line": 16
        },
        {
          "description": "Unescapes delimiters",
          "return": "{String}",
          "api": "public",
          "description_html": "<p>Unescapes delimiters</p>",
          "line": 46
        }
      ]
    ]
  },
  "arrayify.js": {
    "name": "arrayify.js",
    "path": "lib/utils/arrayify.js",
    "comments": [
      [
        {
          "description": "Coerce the value to an array",
          "param": [
            "{name} arrayify",
            "{Array|String} arr"
          ],
          "return": "{Array}",
          "api": "public",
          "description_html": "<p>Coerce the value to an array</p>",
          "params": [
            {
              "type": "name",
              "name": "arrayify",
              "description": ""
            },
            {
              "type": "Array|String",
              "name": "arr",
              "description": ""
            }
          ],
          "line": 12
        }
      ]
    ]
  },
  "block.js": {
    "name": "block.js",
    "path": "lib/utils/block.js",
    "comments": [
      [
        {
          "description": "TODO: This isn't used anywhere.\nMove it to example for delims!",
          "description_html": "<p>TODO: This isn't used anywhere.\nMove it to example for delims!</p>",
          "line": 16
        },
        {
          "description": "Create a block template",
          "return": "{String}",
          "api": "public",
          "description_html": "<p>Create a block template</p>",
          "line": 36
        }
      ]
    ]
  },
  "condense.js": {
    "name": "condense.js",
    "path": "lib/utils/condense.js",
    "comments": [
      [
        {
          "description": "Remove all extraneous newlines.",
          "title": "compact",
          "param": "{String} str",
          "return": "{String}",
          "api": "public",
          "description_html": "<p>Remove all extraneous newlines.</p>",
          "params": [
            {
              "type": "String",
              "name": "str",
              "description": ""
            }
          ],
          "line": 13
        }
      ]
    ]
  },
  "convertUrl.js": {
    "name": "convertUrl.js",
    "path": "lib/utils/convertUrl.js",
    "comments": [
      []
    ]
  },
  "dir.js": {
    "name": "dir.js",
    "path": "lib/utils/dir.js",
    "comments": [
      [
        {
          "description": "Get the relative path from process.cwd() to\nthe specifiied paths, from any other directory\nin the project.",
          "return": "{String}",
          "api": "public",
          "description_html": "<p>Get the relative path from process.cwd() to\nthe specifiied paths, from any other directory\nin the project.</p>",
          "line": 17
        }
      ]
    ]
  },
  "expandData.js": {
    "name": "expandData.js",
    "path": "lib/utils/expandData.js",
    "comments": [
      [
        {
          "description": "Read in data from a string, object or array",
          "name": "expandData",
          "param": [
            "{String,Object,Array} data     String, object or array",
            "{Object}              options  Pass an object of options"
          ],
          "return": "{Object}                       Returns an object of metadata",
          "api": "{Public}",
          "description_html": "<p>Read in data from a string, object or array</p>",
          "params": [
            {
              "type": "String,Object,Array",
              "name": "data",
              "description": "String, object or array"
            },
            {
              "type": "Object",
              "name": "options",
              "description": "Pass an object of options"
            }
          ],
          "line": 19
        }
      ]
    ]
  },
  "extendContext.js": {
    "name": "extendContext.js",
    "path": "lib/utils/extendContext.js",
    "comments": [
      []
    ]
  },
  "index.js": {
    "name": "index.js",
    "path": "lib/utils/index.js",
    "comments": [
      []
    ]
  },
  "inspect.js": {
    "name": "inspect.js",
    "path": "lib/utils/inspect.js",
    "comments": [
      []
    ]
  },
  "isType.js": {
    "name": "isType.js",
    "path": "lib/utils/isType.js",
    "comments": [
      [
        {
          "description": "Returns the `typeOf` a JavaScript value",
          "return": "{String}",
          "api": "public",
          "description_html": "<p>Returns the <code>typeOf</code> a JavaScript value</p>",
          "line": 11
        }
      ]
    ]
  },
  "lookup.js": {
    "name": "lookup.js",
    "path": "lib/utils/lookup.js",
    "comments": [
      [
        {
          "description": "Convenience wrapper around `glob.find` and `glob.match`.\nExpand the given glob patterns, then look for a match\nin the result set.",
          "param": [
            "{String}  patterns  The glob patterns to expand.",
            "{String}  name      The name to match in the result set."
          ],
          "return": "{String}  Return matches.",
          "description_html": "<p>Convenience wrapper around <code>glob.find</code> and <code>glob.match</code>.\nExpand the given glob patterns, then look for a match\nin the result set.</p>",
          "params": [
            {
              "type": "String",
              "name": "patterns",
              "description": "The glob patterns to expand."
            },
            {
              "type": "String",
              "name": "name",
              "description": "The name to match in the result set."
            }
          ],
          "line": 28
        }
      ]
    ]
  },
  "md.js": {
    "name": "md.js",
    "path": "lib/utils/md.js",
    "comments": [
      [
        {
          "description": "Format markdown, adjusts whitespace.",
          "title": "format",
          "param": "{String}  str",
          "return": "{String}       [description]",
          "description_html": "<p>Format markdown, adjusts whitespace.</p>",
          "params": [
            {
              "type": "String",
              "name": "str",
              "description": ""
            }
          ],
          "line": 43
        }
      ]
    ]
  },
  "postProcess.js": {
    "name": "postProcess.js",
    "path": "lib/utils/postProcess.js",
    "comments": [
      [
        {
          "description": "Post-process content with RegExp replacement patterns",
          "param": [
            "{String} str      The string with patterns to replace.",
            "{Object} options  The options to use @option {patterns} Replacement patterns to use"
          ],
          "return": "{String}          The transformed string.",
          "api": "public",
          "description_html": "<p>Post-process content with RegExp replacement patterns</p>",
          "params": [
            {
              "type": "String",
              "name": "str",
              "description": "The string with patterns to replace."
            },
            {
              "type": "Object",
              "name": "options",
              "description": "The options to use @option {patterns} Replacement patterns to use"
            }
          ],
          "line": 18
        }
      ]
    ]
  },
  "rollcall.js": {
    "name": "rollcall.js",
    "path": "lib/utils/rollcall.js",
    "comments": [
      []
    ]
  },
  "time.js": {
    "name": "time.js",
    "path": "lib/utils/time.js",
    "comments": [
      [
        {
          "description": "## function time()\nGet the current time using `.toLocaleTimeString()`.",
          "return": "{String}",
          "api": "Public",
          "description_html": "<h2>function time()</h2>\n\n<p>Get the current time using <code>.toLocaleTimeString()</code>.</p>",
          "line": 13
        }
      ]
    ]
  },
  "timestamp.js": {
    "name": "timestamp.js",
    "path": "lib/utils/timestamp.js",
    "comments": [
      [
        {
          "description": "Get the current time using `.toISOString()`",
          "name": "function timetamp()",
          "return": "{String}",
          "api": "Public",
          "description_html": "<p>Get the current time using <code>.toISOString()</code></p>",
          "line": 9
        }
      ]
    ]
  }
}