#!/usr/bin/env node

/**
 * TODO: all of this... make it real good-like.
 */

// What's my name?
process.title = 'verb';

// Who do I depend on?
var fs = require('fs');
var path = require('path');
var file = require('fs-utils');
var inquirer = require('inquirer');
var Liftoff = require('liftoff');

// Get your Verb on.
var verb = require('../index');
var colors = verb.colors;

var meta = verb.verbMetadata;

/**
 * Update Verb's `runner` metadata with info about the
 * current tool, e.g. `verb-cli`. Use in templates with
 * the `runner.name` and `runner.url` variables.
 *
 * This is useful for generating stuff like:
 *
 *   _Generated by [verb-cli](https://github.com/assemble/verb-cli), on X date_
 *
 * @api public
 */

verb.runner = {
  name: "verb-cli",
  url: 'https://github.com/assemble/verb-cli'
};


var cli = new Liftoff({
  name: 'verb',
  configName: 'docs/{verbfile,.verb}',
  addExtensions: ['rc', 'rc.yml', 'js'],
  processTitle: 'verb',
  configPathFlag: 'verb',
  preloadFlag: 'require',
  completionFlag: 'completion',
  completions: function (type) {
    verb.log('Completions not implemented.');
  }
});


cli.on('require', function (name, module) {
  if (name === 'coffee-script') {
    module.register();
  }
  verb.log('Requiring external module:', name);
});


cli.on('requireFail', function (name, err) {
  verb.log('Unable to require external module:', name, err);
});

cli.launch(handler);


function handler (env) {
  var argv = env.argv;
  var tasks = argv._;

  if (!env.modulePath) {
    verb.log.error('No local Verb found in', verb.colors.yellow(env.cwd));
    verb.log.error('Verb must be installed locally, please run: `npm install Verb`');
    process.exit(1);
  }

  if (!env.configPath) {
    verb.log.error('No verbfile found');
    process.exit(1);
  }

  var verbfile = require(env.configPath);
  verb.log.info('Using verbfile', verb.log.em(env.configPath));

  var verbModule = require(env.modulePath);

  if(env.configPath) {
    process.chdir(env.configBase);
    require(env.configPath)(verb);
  } else {
    verb.log('No Verbfile found.');
    process.exit(1);
  }

  // verb.log(env);
  // verb.log(verb.verbModule('_temp.md'))
  // verb.log(verb.cwd());
}

/**
 * Logging messages
 */

var msg = {
  noTemplates: function(dir) {
    var text = [
      '[verb-cli]: templates in the ' + dir,
      'directory to have a `.tmpl.md` extension.',
      'Visit the Verb documentation to learn more >',
      'https://github.com/assemble/verb/'
    ].join(' ');
    return text;
  }
};


/**
 * Do stuff. But not in a straightforward way. Only do
 * stuff based on other stuff.
 */

// var files = function(dir) {
//   dir = dir + '/**/*.tmpl.md';
//   var templates = file.expand(dir, {filter: 'isFile'});

//   // Return if no templates are found.
//   if (!templates.length) {
//     verb.log.error(msg.noTemplates(dir));
//     return;
//   }
//   return templates;
// };


// var destination = './';

// function render(dirpath) {
//   files(dirpath).map(function(filepath) {
//     var name = file.name(filepath).replace(/^_/, '');

//     // Run verb
//     var content = file.readFileSync(filepath);
//     var dest = path.join(destination || verb.cwd('./'), name + '.md');
//   });
// };

// verb.log(render('docs'));


// /**
//  * Nothing yet.
//  */

// if(program.directory) {
//   file.expand(program.rawArgs[3] + '/*', {filter: 'isFile'}).map(function(task) {
//     require(path.resolve(task));
//     verb.log.success('Success\n');
//   });
// } else if(program.file) {
//   file.expand(program.rawArgs[3], {filter: 'isFile'}).map(function(task) {
//     require(path.resolve(task));
//     verb.log.success('Success\n');
//   });
// }

// /**
//  * If no path is specified, ask for one.
//  */

// if (process.argv.length < 3) {
//   try {
//     render('./docs');
//   } catch(e) {
//     prompt.message = 'Please supply a source directory';
//     prompt.start();
//     prompt.get(['path'], function (err, result) {

//       /**
//        * Now, actually do something.
//        */
//       render(result.path);
//     });
//   }
// } else {
//   try {

//     /**
//      * Wait, before I was just kidding. Now, actually do something.
//      */
//     render(process.argv[2]);
//   } catch(e) {
//     verb.log.error('Verb cannot find any templates in the specified directory.', e);
//   }
// }