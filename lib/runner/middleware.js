'use strict';

var falsey = require('falsey');
var diff = require('base-diff');
var utils = require('../utils');

module.exports = function(app, base, env) {
  app.use(function fn(view) {
    if (!view.isView) return fn;

    view.define('isType', function(type) {
      return this.options.viewType.indexOf(type) !== -1;
    });
  });

  app.onLoad(/\.verb\.md/, diff.view('diffWords'));
  app.onLoad(/\.verb\.md/, function(view, next) {
    view.path = view.dest = 'readme.md';
    next();
  });

  var append = '\n\n_(TOC generated by [verb](https://github.com/verbose/verb))_';
  app.preRender(/\.md/, function(view, next) {
    if (!view.isType('partial')) {
      var toc = utils.toc(app, {append: append});
      return toc(view, next);
    }
    return next();
  });

  app.preWrite(/readme.md$/i, function(view, next) {
    if (app.enabled('diff')) {
      view.diff();
    }
    next();
  });

  app.preWrite(/package\.json$/, function(view, next) {
    view.dest = 'package.json';
    next();
  });

  app.preLayout(/\.md/, function(view, next) {
    if (view.isType('partial')) return next();

    // working on a better method for this!
    var layout = app.get('env.user.pkg.verb.layout');
    if (typeof layout !== 'undefined') {
      view.layout = layout;
      return next();
    }

    if (typeof view.layout === 'string' || isFalsey(view)) {
      return next();
    }

    if (needsLayout(view.content)) {
      view.layout = 'default';
    }
    next();
  });
};

// placeholder
function needsLayout(str) {
  if (!/^# /.test(str)) {
    return true;
  }
  return false;
}

function isFalsey(view) {
  if (typeof view.layout === 'undefined' && falsey(view.layout)) {
    return true;
  }
  return false;
}
