'use strict';

var diff = require('base-diff');
var mdu = require('middleware-utils');
var middleware = require('./middleware/');
var utils = require('../utils');

module.exports = function(app, base, env) {
  /**
   * Table of contents > adds `file.data.toc` property
   */

  var append = '_(TOC generated by [verb](https://github.com/verbose/verb) '
    + 'using [markdown-toc](https://github.com/jonschlinkert/markdown-toc))_';

  /**
   * Readme dest path
   */

  app.onLoad(/\.verb\.md/, function(view, next) {
    view.options.section = view.options.section || {};
    view.path = view.dest = 'readme.md';
    next();
  });

  // extend comments with code examples
  app.onLoad(/\.md/, middleware.examples(app));

  // add toc to `view.data`
  app.postLayout(/\.md/, mdu.series([
    middleware.toc.create(app, append),
    // middleware.toc.inject(app, append),
  ]), middleware.error('postLayout'));

  // format markdown between TOC-creation and TOC-injection
  app.preRender(/\.md/, mdu.series([
    middleware.toc.create(app, append),
  ]), middleware.error('preRender'));

  // format markdown between TOC-creation and TOC-injection
  // app.postRender(/\.md/, mdu.series([
  //   middleware.toc.inject(app, append),
  // ]), middleware.error('postRender'));

  // format markdown between TOC-creation and TOC-injection
  app.preWrite(/./, mdu.series([
    middleware.toc.inject(app, append),
  ]), middleware.error('preWrite'));

  app.preWrite(/./, function(view, next) {
    view.content = view.content.replace(/\)[\s\n]+\[!\[/g, ') [![');
    next();
  });

  // add reflinks
  app.postRender(/(default|readme|\.verb)/, mdu.series([
    middleware.reflinks(app),
  ]), middleware.error('preWrite'));

  /**
   * Merge options onto `view.data`
   */

  app.preLayout(/\.md$/, function(view, next) {
    view.data.options = utils.merge({}, app.options, view.data.options, view.options);
    next();
  });

  app.preRender(/./, function(view, next) {
    view.data.options = utils.merge({}, view.data.options, view.options);
    next();
  });

  /**
   * Diff files (currently just testing readme)
   */

  app.preRender(/./, diff.view('diffLines'));
  app.postRender(/./, function(view, next) {
    var diff = app.option('diff');
    if (diff === true || diff === view.stem) {
      view.diff();
    }
    next();
  });

  /**
   * Determine layout
   */

  app.preLayout(/\.md/, function(view, next) {
    if (view.isType('partial')) {
      next();
      return;
    }
    var layout = app.pkg.get('verb.layout');
    if (utils.isObject(layout)) {
      var opts = layout;
      layout = layout.name;
    }
    if (typeof layout !== 'undefined') {
      view.layout = layout;
    }
    next();
  });

  app.preWrite(/package\.json$/, function(view, next) {
    view.dest = 'package.json';
    next();
  });
};
